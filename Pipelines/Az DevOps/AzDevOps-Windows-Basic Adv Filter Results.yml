trigger:
- master

pool:
  vmImage: windows-latest

variables:
  veracodeAppProfile: AzDevOps.$(Build.DefinitionName)
  caminhoPacote: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip

steps:
- task: VSBuild@1
  displayName: 'Build solution **\*.sln'
  inputs:
    vsVersion: 16.0
    msbuildArgs: '/p:OutputPath=$(build.artifactstagingdirectory)\bin /p:DeployOnBuild=true /p:WebPublishMethod=FileSystem  /p:PrecompileBeforePublish=true /p:EnableUpdateable=false /p:DebugSymbols=true  /p:UseMerge=false /p:DeleteAppCodeCompiledFiles=True /p:DeleteExistingFiles=True  /p:WDPMergeOption=CreateSeparateAssembly /p:UseFixedNames=true'
    msbuildArchitecture: x64

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $sourcePath = Get-Location
      $destinationPath = "$(caminhoPacote)"
      New-Item -Path ".\UploadVeracode" -ItemType Directory

      # Filtrar os arquivos DLL
      $dllFiles = Get-ChildItem -Path $sourcePath -Filter *.dll -File -Recurse

      # Inicialize um array para armazenar os arquivos DLL e PDB correspondentes
      $filesToInclude = @()

      # Para cada arquivo DLL encontrado, verifique se h√° um arquivo PDB correspondente
      foreach ($dllFile in $dllFiles) {
          $pdbFile = Get-ChildItem -Path $sourcePath -Filter "$($dllFile.BaseName).pdb" -File -Recurse
          if ($pdbFile) {
              Move-Item -Path $dllFile.FullName, $pdbFile.FullName -Destination ".\UploadVeracode" -Verbose
          }
      }

      Compress-Archive -Path ".\UploadVeracode" -DestinationPath "$destinationPath"
      Write-Host "Arquivo zip criado com sucesso em: $destinationPath"
  displayName: 'Criando pacote para analise'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      curl -o veracode-wrapper.jar https://repo1.maven.org/maven2/com/veracode/vosp/api/wrappers/vosp-api-wrappers-java/23.4.11.2/vosp-api-wrappers-java-23.4.11.2.jar
  displayName: 'Download Veracode Wrapper'
  continueOnError: true

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      java -jar veracode-wrapper.jar -vid $(VeracodeID) -vkey $(VeracodeKey) -action uploadandscan -appname $(veracodeAppProfile) -createprofile true  -version $(build.buildNumber) -filepath $(caminhoPacote) -scantimeout 55 -scanpollinginterval 30
  displayName: 'Veracode U&S'
  continueOnError: true

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $numeroVersao = Get-Date -Format hhmmssddMMyy
      # Recebe o App ID com base no nome da aplicacao dentro do Veracode
      [xml]$INFO = $(java -jar veracode-wrapper.jar -vid $(VeracodeID) -vkey $(VeracodeKey) -action GetAppList | Select-String -Pattern $(veracodeAppProfile))[0]
      # Filtra o App ID
      $appID = $INFO.app.app_id
      try {
          # Pega o ID da build
              [xml]$buildINFO = $(java -jar veracode-wrapper.jar -vid $(VeracodeID) -vkey $(VeracodeKey) -action getbuildinfo -appid $appID)
              $buildID = $buildINFO.buildinfo.build_id
              # Gera o relatorio
              $out = java -jar veracode-wrapper.jar -vid $(VeracodeID) -vkey $(VeracodeKey) -action summaryreport -buildid "$buildID" -outputfilepath "$numeroVersao.xml"
              $securityINFO = [xml](Get-Content "$numeroVersao.xml")
              # Recebendo informacoes
              Clear-Host
              $notaLetra = $securityINFO.summaryreport.'static-analysis'.rating
              $notaScore = $securityINFO.summaryreport.'static-analysis'.score
              $quemEnviou = $securityINFO.summaryreport.submitter
              $politica = $securityINFO.summaryreport.policy_name
              $complicanceStatus = $securityINFO.summaryreport.policy_compliance_status
              # Exibe os resultados
              Write-Host "Resultado do Scan: $numeroVersao"
              Write-Host "Nome App: $(veracodeAppProfile) - App ID: $appID"
              Write-Host "Enviado por: $quemEnviou"
              Write-Host "Politica: $politica"
              Write-Host "Nota: $notaLetra - Score: $notaScore - Resultado: $complicanceStatus"
              Write-Host "Lista dos problemas encontrados:"
              $levels = $securityINFO.summaryreport.severity.level
              [array]::Reverse($levels)
              foreach ($level in $levels) {
                  $securityINFO.summaryreport.severity[$level].category
              }
      }
      catch {
          $ErrorMessage = $_.Exception.Message # Recebe o erro
          Write-Host "Erro ao validar o Scan e pegar os dados"
          Write-Host "$ErrorMessage"
      }
  displayName: 'Veracode Resultados'
  continueOnError: true